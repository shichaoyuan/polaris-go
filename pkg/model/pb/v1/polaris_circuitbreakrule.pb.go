// Code generated by protoc-gen-go. DO NOT EDIT.
// source: polaris_circuitbreakrule.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 主动探测配置
type RecoverConfig_OutlierDetectWhen int32

const (
	// 不开启监控探测
	RecoverConfig_NEVER RecoverConfig_OutlierDetectWhen = 0
	// 只有在熔断恢复时才开启健康探测
	RecoverConfig_ON_RECOVER RecoverConfig_OutlierDetectWhen = 1
	// 一直开启健康探测
	RecoverConfig_ALWAYS RecoverConfig_OutlierDetectWhen = 2
)

var RecoverConfig_OutlierDetectWhen_name = map[int32]string{
	0: "NEVER",
	1: "ON_RECOVER",
	2: "ALWAYS",
}
var RecoverConfig_OutlierDetectWhen_value = map[string]int32{
	"NEVER":      0,
	"ON_RECOVER": 1,
	"ALWAYS":     2,
}

func (x RecoverConfig_OutlierDetectWhen) String() string {
	return proto.EnumName(RecoverConfig_OutlierDetectWhen_name, int32(x))
}
func (RecoverConfig_OutlierDetectWhen) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{2, 0}
}

// 需要进行熔断的资源
// 支持SUBSET（子集群），以及INSTANCE（单个实例），默认为SUBSET
type DestinationSet_Resource int32

const (
	// 针对实例分组进行熔断
	DestinationSet_SUBSET DestinationSet_Resource = 0
	// 针对实例进行熔断
	DestinationSet_INSTANCE DestinationSet_Resource = 1
)

var DestinationSet_Resource_name = map[int32]string{
	0: "SUBSET",
	1: "INSTANCE",
}
var DestinationSet_Resource_value = map[string]int32{
	"SUBSET":   0,
	"INSTANCE": 1,
}

func (x DestinationSet_Resource) String() string {
	return proto.EnumName(DestinationSet_Resource_name, int32(x))
}
func (DestinationSet_Resource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{4, 0}
}

// 熔断决策类型，支持GLOBAL（分布式决策）以及LOCAL(本地决策），默认GLOBAL
// 当指定为GLOBAL时，则会定期上报统计数据并根据汇总数据进行熔断决策
type DestinationSet_Type int32

const (
	DestinationSet_GLOBAL DestinationSet_Type = 0
	DestinationSet_LOCAL  DestinationSet_Type = 1
)

var DestinationSet_Type_name = map[int32]string{
	0: "GLOBAL",
	1: "LOCAL",
}
var DestinationSet_Type_value = map[string]int32{
	"GLOBAL": 0,
	"LOCAL":  1,
}

func (x DestinationSet_Type) String() string {
	return proto.EnumName(DestinationSet_Type_name, int32(x))
}
func (DestinationSet_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{4, 1}
}

// 熔断范围，是否扩散针对相同服务下所有接口进行熔断
type DestinationSet_Scope int32

const (
	// 触发熔断条件，扩散熔断所有接口
	DestinationSet_ALL DestinationSet_Scope = 0
	// 触发熔断条件，只熔断当前接口
	DestinationSet_CURRENT DestinationSet_Scope = 1
)

var DestinationSet_Scope_name = map[int32]string{
	0: "ALL",
	1: "CURRENT",
}
var DestinationSet_Scope_value = map[string]int32{
	"ALL":     0,
	"CURRENT": 1,
}

func (x DestinationSet_Scope) String() string {
	return proto.EnumName(DestinationSet_Scope_name, int32(x))
}
func (DestinationSet_Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{4, 2}
}

// 单个熔断规则定义
type CircuitBreaker struct {
	Id *wrappers.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 规则版本
	Version *wrappers.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// 规则名
	Name *wrappers.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 规则命名空间
	Namespace *wrappers.StringValue `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 规则所属服务
	Service          *wrappers.StringValue `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	ServiceNamespace *wrappers.StringValue `protobuf:"bytes,6,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	// 熔断规则可以分为被调规则和主调规则
	// 被调规则针对所有的指定主调生效，假如不指定则对所有的主调生效
	// 主调规则为当前主调方的规则，假如不指定则针对所有被调生效
	Inbounds  []*CbRule             `protobuf:"bytes,7,rep,name=inbounds,proto3" json:"inbounds,omitempty"`
	Outbounds []*CbRule             `protobuf:"bytes,8,rep,name=outbounds,proto3" json:"outbounds,omitempty"`
	Token     *wrappers.StringValue `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
	Owners    *wrappers.StringValue `protobuf:"bytes,10,opt,name=owners,proto3" json:"owners,omitempty"`
	// 业务
	Business *wrappers.StringValue `protobuf:"bytes,11,opt,name=business,proto3" json:"business,omitempty"`
	// 部门
	Department *wrappers.StringValue `protobuf:"bytes,12,opt,name=department,proto3" json:"department,omitempty"`
	// 规则描述
	Comment              *wrappers.StringValue `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	Ctime                *wrappers.StringValue `protobuf:"bytes,14,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                *wrappers.StringValue `protobuf:"bytes,15,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Revision             *wrappers.StringValue `protobuf:"bytes,16,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CircuitBreaker) Reset()         { *m = CircuitBreaker{} }
func (m *CircuitBreaker) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker) ProtoMessage()    {}
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{0}
}
func (m *CircuitBreaker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker.Unmarshal(m, b)
}
func (m *CircuitBreaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker.Marshal(b, m, deterministic)
}
func (dst *CircuitBreaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker.Merge(dst, src)
}
func (m *CircuitBreaker) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker.Size(m)
}
func (m *CircuitBreaker) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker proto.InternalMessageInfo

func (m *CircuitBreaker) GetId() *wrappers.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CircuitBreaker) GetVersion() *wrappers.StringValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CircuitBreaker) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CircuitBreaker) GetNamespace() *wrappers.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *CircuitBreaker) GetService() *wrappers.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *CircuitBreaker) GetServiceNamespace() *wrappers.StringValue {
	if m != nil {
		return m.ServiceNamespace
	}
	return nil
}

func (m *CircuitBreaker) GetInbounds() []*CbRule {
	if m != nil {
		return m.Inbounds
	}
	return nil
}

func (m *CircuitBreaker) GetOutbounds() []*CbRule {
	if m != nil {
		return m.Outbounds
	}
	return nil
}

func (m *CircuitBreaker) GetToken() *wrappers.StringValue {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *CircuitBreaker) GetOwners() *wrappers.StringValue {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *CircuitBreaker) GetBusiness() *wrappers.StringValue {
	if m != nil {
		return m.Business
	}
	return nil
}

func (m *CircuitBreaker) GetDepartment() *wrappers.StringValue {
	if m != nil {
		return m.Department
	}
	return nil
}

func (m *CircuitBreaker) GetComment() *wrappers.StringValue {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *CircuitBreaker) GetCtime() *wrappers.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *CircuitBreaker) GetMtime() *wrappers.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *CircuitBreaker) GetRevision() *wrappers.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

// 主调匹配规则
type SourceMatcher struct {
	// 主调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrappers.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrappers.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，主调业务标签，用于匹配是否使用该熔断规则，可放置用户的接口信息等
	Labels               map[string]*MatchString `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SourceMatcher) Reset()         { *m = SourceMatcher{} }
func (m *SourceMatcher) String() string { return proto.CompactTextString(m) }
func (*SourceMatcher) ProtoMessage()    {}
func (*SourceMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{1}
}
func (m *SourceMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceMatcher.Unmarshal(m, b)
}
func (m *SourceMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceMatcher.Marshal(b, m, deterministic)
}
func (dst *SourceMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceMatcher.Merge(dst, src)
}
func (m *SourceMatcher) XXX_Size() int {
	return xxx_messageInfo_SourceMatcher.Size(m)
}
func (m *SourceMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_SourceMatcher proto.InternalMessageInfo

func (m *SourceMatcher) GetService() *wrappers.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *SourceMatcher) GetNamespace() *wrappers.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *SourceMatcher) GetLabels() map[string]*MatchString {
	if m != nil {
		return m.Labels
	}
	return nil
}

// 熔断恢复配置
type RecoverConfig struct {
	// 触发熔断后到半开状态之间的等待间隔
	SleepWindow *duration.Duration `protobuf:"bytes,1,opt,name=sleepWindow,proto3" json:"sleepWindow,omitempty"`
	// 半开后，最多重试多少次恢复
	MaxRetryAfterHalfOpen *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=maxRetryAfterHalfOpen,proto3" json:"maxRetryAfterHalfOpen,omitempty"`
	// 半开后放量的最大百分比
	RequestRateAfterHalfOpen []*wrappers.UInt32Value `protobuf:"bytes,3,rep,name=requestRateAfterHalfOpen,proto3" json:"requestRateAfterHalfOpen,omitempty"`
	// 熔断器半开到关闭所必须的最少成功率，默认100%
	SuccessRateToClose *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=successRateToClose,proto3" json:"successRateToClose,omitempty"`
	// 半开后最大放量数（用户不配置最大百分比时默认使用该配置）
	RequestCountAfterHalfOpen *wrappers.UInt32Value           `protobuf:"bytes,5,opt,name=requestCountAfterHalfOpen,proto3" json:"requestCountAfterHalfOpen,omitempty"`
	OutlierDetectWhen         RecoverConfig_OutlierDetectWhen `protobuf:"varint,6,opt,name=outlierDetectWhen,proto3,enum=v1.RecoverConfig_OutlierDetectWhen" json:"outlierDetectWhen,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                        `json:"-"`
	XXX_unrecognized          []byte                          `json:"-"`
	XXX_sizecache             int32                           `json:"-"`
}

func (m *RecoverConfig) Reset()         { *m = RecoverConfig{} }
func (m *RecoverConfig) String() string { return proto.CompactTextString(m) }
func (*RecoverConfig) ProtoMessage()    {}
func (*RecoverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{2}
}
func (m *RecoverConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverConfig.Unmarshal(m, b)
}
func (m *RecoverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverConfig.Marshal(b, m, deterministic)
}
func (dst *RecoverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverConfig.Merge(dst, src)
}
func (m *RecoverConfig) XXX_Size() int {
	return xxx_messageInfo_RecoverConfig.Size(m)
}
func (m *RecoverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverConfig proto.InternalMessageInfo

func (m *RecoverConfig) GetSleepWindow() *duration.Duration {
	if m != nil {
		return m.SleepWindow
	}
	return nil
}

func (m *RecoverConfig) GetMaxRetryAfterHalfOpen() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxRetryAfterHalfOpen
	}
	return nil
}

func (m *RecoverConfig) GetRequestRateAfterHalfOpen() []*wrappers.UInt32Value {
	if m != nil {
		return m.RequestRateAfterHalfOpen
	}
	return nil
}

func (m *RecoverConfig) GetSuccessRateToClose() *wrappers.UInt32Value {
	if m != nil {
		return m.SuccessRateToClose
	}
	return nil
}

func (m *RecoverConfig) GetRequestCountAfterHalfOpen() *wrappers.UInt32Value {
	if m != nil {
		return m.RequestCountAfterHalfOpen
	}
	return nil
}

func (m *RecoverConfig) GetOutlierDetectWhen() RecoverConfig_OutlierDetectWhen {
	if m != nil {
		return m.OutlierDetectWhen
	}
	return RecoverConfig_NEVER
}

// 熔断策略
type CbPolicy struct {
	ErrorRate *CbPolicy_ErrRateConfig  `protobuf:"bytes,1,opt,name=errorRate,proto3" json:"errorRate,omitempty"`
	SlowRate  *CbPolicy_SlowRateConfig `protobuf:"bytes,2,opt,name=slowRate,proto3" json:"slowRate,omitempty"`
	// 熔断的决策周期，多久触发一次熔断决策
	JudgeDuration *duration.Duration `protobuf:"bytes,3,opt,name=judgeDuration,proto3" json:"judgeDuration,omitempty"`
	// 最大熔断比例，超过多少比例后不会继续熔断
	MaxEjectionPercent   *wrappers.UInt32Value          `protobuf:"bytes,4,opt,name=maxEjectionPercent,proto3" json:"maxEjectionPercent,omitempty"`
	Consecutive          *CbPolicy_ConsecutiveErrConfig `protobuf:"bytes,5,opt,name=consecutive,proto3" json:"consecutive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CbPolicy) Reset()         { *m = CbPolicy{} }
func (m *CbPolicy) String() string { return proto.CompactTextString(m) }
func (*CbPolicy) ProtoMessage()    {}
func (*CbPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{3}
}
func (m *CbPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy.Unmarshal(m, b)
}
func (m *CbPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy.Marshal(b, m, deterministic)
}
func (dst *CbPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy.Merge(dst, src)
}
func (m *CbPolicy) XXX_Size() int {
	return xxx_messageInfo_CbPolicy.Size(m)
}
func (m *CbPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy proto.InternalMessageInfo

func (m *CbPolicy) GetErrorRate() *CbPolicy_ErrRateConfig {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *CbPolicy) GetSlowRate() *CbPolicy_SlowRateConfig {
	if m != nil {
		return m.SlowRate
	}
	return nil
}

func (m *CbPolicy) GetJudgeDuration() *duration.Duration {
	if m != nil {
		return m.JudgeDuration
	}
	return nil
}

func (m *CbPolicy) GetMaxEjectionPercent() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return nil
}

func (m *CbPolicy) GetConsecutive() *CbPolicy_ConsecutiveErrConfig {
	if m != nil {
		return m.Consecutive
	}
	return nil
}

// 错误率熔断配置
type CbPolicy_ErrRateConfig struct {
	// 是否启用错误率配置
	Enable *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 触发错误率熔断的最低请求阈值
	RequestVolumeThreshold *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=requestVolumeThreshold,proto3" json:"requestVolumeThreshold,omitempty"`
	// 可选。触发保持状态的错误率阈值，假如不配置，则默认不会进入Preserved状态
	ErrorRateToPreserved *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	// 触发熔断的错误率阈值
	ErrorRateToOpen      *wrappers.UInt32Value                   `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
	Specials             []*CbPolicy_ErrRateConfig_SpecialConfig `protobuf:"bytes,5,rep,name=specials,proto3" json:"specials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CbPolicy_ErrRateConfig) Reset()         { *m = CbPolicy_ErrRateConfig{} }
func (m *CbPolicy_ErrRateConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_ErrRateConfig) ProtoMessage()    {}
func (*CbPolicy_ErrRateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{3, 0}
}
func (m *CbPolicy_ErrRateConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_ErrRateConfig.Unmarshal(m, b)
}
func (m *CbPolicy_ErrRateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_ErrRateConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_ErrRateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_ErrRateConfig.Merge(dst, src)
}
func (m *CbPolicy_ErrRateConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_ErrRateConfig.Size(m)
}
func (m *CbPolicy_ErrRateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_ErrRateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_ErrRateConfig proto.InternalMessageInfo

func (m *CbPolicy_ErrRateConfig) GetEnable() *wrappers.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetRequestVolumeThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.RequestVolumeThreshold
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetErrorRateToPreserved() *wrappers.UInt32Value {
	if m != nil {
		return m.ErrorRateToPreserved
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetErrorRateToOpen() *wrappers.UInt32Value {
	if m != nil {
		return m.ErrorRateToOpen
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig) GetSpecials() []*CbPolicy_ErrRateConfig_SpecialConfig {
	if m != nil {
		return m.Specials
	}
	return nil
}

// 错误码相关特定配置
type CbPolicy_ErrRateConfig_SpecialConfig struct {
	// 熔断关心的错误类型，用户可以自己定义
	Type                 *wrappers.StringValue  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ErrorCodes           []*wrappers.Int64Value `protobuf:"bytes,2,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	ErrorRateToPreserved *wrappers.UInt32Value  `protobuf:"bytes,3,opt,name=errorRateToPreserved,proto3" json:"errorRateToPreserved,omitempty"`
	ErrorRateToOpen      *wrappers.UInt32Value  `protobuf:"bytes,4,opt,name=errorRateToOpen,proto3" json:"errorRateToOpen,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) Reset()         { *m = CbPolicy_ErrRateConfig_SpecialConfig{} }
func (m *CbPolicy_ErrRateConfig_SpecialConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_ErrRateConfig_SpecialConfig) ProtoMessage()    {}
func (*CbPolicy_ErrRateConfig_SpecialConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{3, 0, 0}
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Unmarshal(m, b)
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Merge(dst, src)
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.Size(m)
}
func (m *CbPolicy_ErrRateConfig_SpecialConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_ErrRateConfig_SpecialConfig proto.InternalMessageInfo

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetType() *wrappers.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorCodes() []*wrappers.Int64Value {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToPreserved() *wrappers.UInt32Value {
	if m != nil {
		return m.ErrorRateToPreserved
	}
	return nil
}

func (m *CbPolicy_ErrRateConfig_SpecialConfig) GetErrorRateToOpen() *wrappers.UInt32Value {
	if m != nil {
		return m.ErrorRateToOpen
	}
	return nil
}

// 慢调用率熔断策略配置
type CbPolicy_SlowRateConfig struct {
	// 是否启用慢调用率配置
	Enable *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 最大响应时间，超过该时间属于慢调用请求
	MaxRt *duration.Duration `protobuf:"bytes,2,opt,name=maxRt,proto3" json:"maxRt,omitempty"`
	// 可选。触发保持状态的超时率阈值，假如不配置，则默认不会进入Preserved状态
	SlowRateToPreserved *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=slowRateToPreserved,proto3" json:"slowRateToPreserved,omitempty"`
	// 触发熔断的超时率阈值
	SlowRateToOpen       *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=slowRateToOpen,proto3" json:"slowRateToOpen,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CbPolicy_SlowRateConfig) Reset()         { *m = CbPolicy_SlowRateConfig{} }
func (m *CbPolicy_SlowRateConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_SlowRateConfig) ProtoMessage()    {}
func (*CbPolicy_SlowRateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{3, 1}
}
func (m *CbPolicy_SlowRateConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_SlowRateConfig.Unmarshal(m, b)
}
func (m *CbPolicy_SlowRateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_SlowRateConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_SlowRateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_SlowRateConfig.Merge(dst, src)
}
func (m *CbPolicy_SlowRateConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_SlowRateConfig.Size(m)
}
func (m *CbPolicy_SlowRateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_SlowRateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_SlowRateConfig proto.InternalMessageInfo

func (m *CbPolicy_SlowRateConfig) GetEnable() *wrappers.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *CbPolicy_SlowRateConfig) GetMaxRt() *duration.Duration {
	if m != nil {
		return m.MaxRt
	}
	return nil
}

func (m *CbPolicy_SlowRateConfig) GetSlowRateToPreserved() *wrappers.UInt32Value {
	if m != nil {
		return m.SlowRateToPreserved
	}
	return nil
}

func (m *CbPolicy_SlowRateConfig) GetSlowRateToOpen() *wrappers.UInt32Value {
	if m != nil {
		return m.SlowRateToOpen
	}
	return nil
}

// 连续错误数熔断配置
type CbPolicy_ConsecutiveErrConfig struct {
	// 是否启用连续错误数配置
	Enable *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// 连续错误数阈值，进入Preserved状态
	ConsecutiveErrorToPreserved *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=consecutiveErrorToPreserved,proto3" json:"consecutiveErrorToPreserved,omitempty"`
	// 连续错误数阈值，进入Open状态
	ConsecutiveErrorToOpen *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=consecutiveErrorToOpen,proto3" json:"consecutiveErrorToOpen,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *CbPolicy_ConsecutiveErrConfig) Reset()         { *m = CbPolicy_ConsecutiveErrConfig{} }
func (m *CbPolicy_ConsecutiveErrConfig) String() string { return proto.CompactTextString(m) }
func (*CbPolicy_ConsecutiveErrConfig) ProtoMessage()    {}
func (*CbPolicy_ConsecutiveErrConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{3, 2}
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Unmarshal(m, b)
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Marshal(b, m, deterministic)
}
func (dst *CbPolicy_ConsecutiveErrConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Merge(dst, src)
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_Size() int {
	return xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.Size(m)
}
func (m *CbPolicy_ConsecutiveErrConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CbPolicy_ConsecutiveErrConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CbPolicy_ConsecutiveErrConfig proto.InternalMessageInfo

func (m *CbPolicy_ConsecutiveErrConfig) GetEnable() *wrappers.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToPreserved() *wrappers.UInt32Value {
	if m != nil {
		return m.ConsecutiveErrorToPreserved
	}
	return nil
}

func (m *CbPolicy_ConsecutiveErrConfig) GetConsecutiveErrorToOpen() *wrappers.UInt32Value {
	if m != nil {
		return m.ConsecutiveErrorToOpen
	}
	return nil
}

// 目标set的规则
type DestinationSet struct {
	// 被调命名空间以及服务名，可以为*，代表全匹配
	Service   *wrappers.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Namespace *wrappers.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 可选，SUBSET标识
	Metadata map[string]*MatchString `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resource DestinationSet_Resource `protobuf:"varint,4,opt,name=resource,proto3,enum=v1.DestinationSet_Resource" json:"resource,omitempty"`
	Type     DestinationSet_Type     `protobuf:"varint,5,opt,name=type,proto3,enum=v1.DestinationSet_Type" json:"type,omitempty"`
	Scope    DestinationSet_Scope    `protobuf:"varint,6,opt,name=scope,proto3,enum=v1.DestinationSet_Scope" json:"scope,omitempty"`
	// 熔断数据度量周期
	// 所有的阈值指标按此周期进行统计
	MetricWindow *duration.Duration `protobuf:"bytes,7,opt,name=metricWindow,proto3" json:"metricWindow,omitempty"`
	// 熔断数据统计精度，决定数据度量的最小周期
	// 度量滑窗的步长=window/precision
	MetricPrecision *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=metricPrecision,proto3" json:"metricPrecision,omitempty"`
	// 熔断数据上报周期，对分布式熔断有效
	UpdateInterval *duration.Duration `protobuf:"bytes,9,opt,name=updateInterval,proto3" json:"updateInterval,omitempty"`
	// 触发熔断后恢复配置
	Recover *RecoverConfig `protobuf:"bytes,10,opt,name=recover,proto3" json:"recover,omitempty"`
	// 熔断策略
	Policy *CbPolicy `protobuf:"bytes,11,opt,name=policy,proto3" json:"policy,omitempty"`
	// 被调的接口信息，指定哪些接口会使用该规则
	Method *MatchString `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`
	// 返回码，指定哪些返回码会使用该规则
	ErrorCodes           []*wrappers.Int64Value `protobuf:"bytes,13,rep,name=errorCodes,proto3" json:"errorCodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DestinationSet) Reset()         { *m = DestinationSet{} }
func (m *DestinationSet) String() string { return proto.CompactTextString(m) }
func (*DestinationSet) ProtoMessage()    {}
func (*DestinationSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{4}
}
func (m *DestinationSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestinationSet.Unmarshal(m, b)
}
func (m *DestinationSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestinationSet.Marshal(b, m, deterministic)
}
func (dst *DestinationSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestinationSet.Merge(dst, src)
}
func (m *DestinationSet) XXX_Size() int {
	return xxx_messageInfo_DestinationSet.Size(m)
}
func (m *DestinationSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DestinationSet.DiscardUnknown(m)
}

var xxx_messageInfo_DestinationSet proto.InternalMessageInfo

func (m *DestinationSet) GetService() *wrappers.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *DestinationSet) GetNamespace() *wrappers.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *DestinationSet) GetMetadata() map[string]*MatchString {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DestinationSet) GetResource() DestinationSet_Resource {
	if m != nil {
		return m.Resource
	}
	return DestinationSet_SUBSET
}

func (m *DestinationSet) GetType() DestinationSet_Type {
	if m != nil {
		return m.Type
	}
	return DestinationSet_GLOBAL
}

func (m *DestinationSet) GetScope() DestinationSet_Scope {
	if m != nil {
		return m.Scope
	}
	return DestinationSet_ALL
}

func (m *DestinationSet) GetMetricWindow() *duration.Duration {
	if m != nil {
		return m.MetricWindow
	}
	return nil
}

func (m *DestinationSet) GetMetricPrecision() *wrappers.UInt32Value {
	if m != nil {
		return m.MetricPrecision
	}
	return nil
}

func (m *DestinationSet) GetUpdateInterval() *duration.Duration {
	if m != nil {
		return m.UpdateInterval
	}
	return nil
}

func (m *DestinationSet) GetRecover() *RecoverConfig {
	if m != nil {
		return m.Recover
	}
	return nil
}

func (m *DestinationSet) GetPolicy() *CbPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *DestinationSet) GetMethod() *MatchString {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *DestinationSet) GetErrorCodes() []*wrappers.Int64Value {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

// 具体熔断规则
type CbRule struct {
	// 如果匹配Source规则，按照Destination进行熔断
	// 多个Source之间的关系为或
	Sources              []*SourceMatcher  `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations         []*DestinationSet `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CbRule) Reset()         { *m = CbRule{} }
func (m *CbRule) String() string { return proto.CompactTextString(m) }
func (*CbRule) ProtoMessage()    {}
func (*CbRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425, []int{5}
}
func (m *CbRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CbRule.Unmarshal(m, b)
}
func (m *CbRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CbRule.Marshal(b, m, deterministic)
}
func (dst *CbRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CbRule.Merge(dst, src)
}
func (m *CbRule) XXX_Size() int {
	return xxx_messageInfo_CbRule.Size(m)
}
func (m *CbRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CbRule.DiscardUnknown(m)
}

var xxx_messageInfo_CbRule proto.InternalMessageInfo

func (m *CbRule) GetSources() []*SourceMatcher {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *CbRule) GetDestinations() []*DestinationSet {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func init() {
	proto.RegisterType((*CircuitBreaker)(nil), "v1.CircuitBreaker")
	proto.RegisterType((*SourceMatcher)(nil), "v1.SourceMatcher")
	proto.RegisterMapType((map[string]*MatchString)(nil), "v1.SourceMatcher.LabelsEntry")
	proto.RegisterType((*RecoverConfig)(nil), "v1.RecoverConfig")
	proto.RegisterType((*CbPolicy)(nil), "v1.CbPolicy")
	proto.RegisterType((*CbPolicy_ErrRateConfig)(nil), "v1.CbPolicy.ErrRateConfig")
	proto.RegisterType((*CbPolicy_ErrRateConfig_SpecialConfig)(nil), "v1.CbPolicy.ErrRateConfig.SpecialConfig")
	proto.RegisterType((*CbPolicy_SlowRateConfig)(nil), "v1.CbPolicy.SlowRateConfig")
	proto.RegisterType((*CbPolicy_ConsecutiveErrConfig)(nil), "v1.CbPolicy.ConsecutiveErrConfig")
	proto.RegisterType((*DestinationSet)(nil), "v1.DestinationSet")
	proto.RegisterMapType((map[string]*MatchString)(nil), "v1.DestinationSet.MetadataEntry")
	proto.RegisterType((*CbRule)(nil), "v1.CbRule")
	proto.RegisterEnum("v1.RecoverConfig_OutlierDetectWhen", RecoverConfig_OutlierDetectWhen_name, RecoverConfig_OutlierDetectWhen_value)
	proto.RegisterEnum("v1.DestinationSet_Resource", DestinationSet_Resource_name, DestinationSet_Resource_value)
	proto.RegisterEnum("v1.DestinationSet_Type", DestinationSet_Type_name, DestinationSet_Type_value)
	proto.RegisterEnum("v1.DestinationSet_Scope", DestinationSet_Scope_name, DestinationSet_Scope_value)
}

func init() {
	proto.RegisterFile("polaris_circuitbreakrule.proto", fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425)
}

var fileDescriptor_polaris_circuitbreakrule_16d0d437b85fe425 = []byte{
	// 1336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x73, 0xdb, 0xc4,
	0x17, 0xaf, 0x9d, 0xd8, 0x71, 0x9e, 0x63, 0xd7, 0xd9, 0xf6, 0xfb, 0x45, 0x75, 0x69, 0xa7, 0x98,
	0x02, 0x99, 0x29, 0xe3, 0xd2, 0xb4, 0x94, 0x4e, 0x5b, 0x86, 0x71, 0x14, 0x03, 0x61, 0x5c, 0x27,
	0xc8, 0x6e, 0x0b, 0x1c, 0xe8, 0xc8, 0xd2, 0x4b, 0xa2, 0x56, 0xd2, 0x8a, 0xdd, 0x95, 0xd3, 0xdc,
	0x38, 0x71, 0x61, 0xb8, 0x71, 0xe0, 0xff, 0xe0, 0x6f, 0xe3, 0xc0, 0x8d, 0xd9, 0xd5, 0xfa, 0x87,
	0xfc, 0x23, 0x28, 0xe5, 0x00, 0x27, 0x5b, 0x7a, 0x9f, 0xcf, 0xdb, 0xa7, 0xb7, 0x9f, 0xf7, 0xf6,
	0x2d, 0x5c, 0x8f, 0xa8, 0x6f, 0x33, 0x8f, 0xbf, 0x70, 0x3c, 0xe6, 0xc4, 0x9e, 0x18, 0x30, 0xb4,
	0x5f, 0xb1, 0xd8, 0xc7, 0x66, 0xc4, 0xa8, 0xa0, 0x24, 0x3f, 0xbc, 0x53, 0xbf, 0x7e, 0x44, 0xe9,
	0x91, 0x8f, 0xb7, 0xd5, 0x9b, 0x41, 0x7c, 0x78, 0xfb, 0x84, 0xd9, 0x51, 0x84, 0x8c, 0x27, 0x98,
	0x79, 0xbb, 0x1b, 0x33, 0x5b, 0x78, 0x34, 0xd4, 0xf6, 0x4b, 0xa3, 0x35, 0x02, 0xea, 0xa2, 0x9f,
	0xbc, 0x6c, 0xfc, 0x51, 0x84, 0xaa, 0x99, 0xac, 0xb9, 0x23, 0xd7, 0x44, 0x46, 0x3e, 0x84, 0xbc,
	0xe7, 0x1a, 0xb9, 0x1b, 0xb9, 0xad, 0xf2, 0xf6, 0xdb, 0xcd, 0xc4, 0x69, 0x73, 0xe4, 0xb4, 0xd9,
	0x13, 0xcc, 0x0b, 0x8f, 0x9e, 0xd9, 0x7e, 0x8c, 0x56, 0xde, 0x73, 0xc9, 0x7d, 0x58, 0x1b, 0x22,
	0xe3, 0x1e, 0x0d, 0x8d, 0x7c, 0x06, 0xca, 0x08, 0x4c, 0x3e, 0x82, 0xd5, 0xd0, 0x0e, 0xd0, 0x58,
	0xc9, 0x40, 0x52, 0x48, 0xf2, 0x10, 0xd6, 0xe5, 0x2f, 0x8f, 0x6c, 0x07, 0x8d, 0xd5, 0x0c, 0xb4,
	0x09, 0x5c, 0x46, 0xc9, 0x91, 0x0d, 0x3d, 0x07, 0x8d, 0x42, 0x96, 0x28, 0x35, 0x98, 0xec, 0xc1,
	0xa6, 0xfe, 0xfb, 0x62, 0xb2, 0x76, 0x31, 0x83, 0x87, 0x9a, 0xa6, 0x75, 0xc7, 0x21, 0xbc, 0x0f,
	0x25, 0x2f, 0x1c, 0xd0, 0x38, 0x74, 0xb9, 0xb1, 0x76, 0x63, 0x65, 0xab, 0xbc, 0x0d, 0xcd, 0xe1,
	0x9d, 0xa6, 0x39, 0xb0, 0x62, 0x1f, 0xad, 0xb1, 0x8d, 0x6c, 0xc1, 0x3a, 0x8d, 0x85, 0x06, 0x96,
	0xe6, 0x80, 0x13, 0x23, 0xd9, 0x86, 0x82, 0xa0, 0xaf, 0x30, 0x34, 0xd6, 0x33, 0x04, 0x94, 0x40,
	0xc9, 0x3d, 0x28, 0xd2, 0x93, 0x10, 0x19, 0x37, 0x20, 0x03, 0x49, 0x63, 0xc9, 0x03, 0x28, 0x0d,
	0x62, 0xee, 0x85, 0xc8, 0xb9, 0x51, 0xce, 0xc0, 0x1b, 0xa3, 0xc9, 0x63, 0x00, 0x17, 0x23, 0x9b,
	0x89, 0x00, 0x43, 0x61, 0x6c, 0x64, 0xe0, 0x4e, 0xe1, 0xe5, 0xb6, 0x39, 0x34, 0x50, 0xd4, 0x4a,
	0x96, 0x6d, 0xd3, 0x60, 0x99, 0x19, 0x47, 0x78, 0x01, 0x1a, 0xd5, 0x2c, 0x99, 0x51, 0x50, 0xc9,
	0x09, 0x14, 0xe7, 0x62, 0x16, 0x8e, 0x82, 0xca, 0xbc, 0x30, 0x1c, 0x7a, 0x4a, 0xfd, 0xb5, 0x2c,
	0x79, 0x19, 0xa1, 0x1b, 0x3f, 0xe5, 0xa1, 0xd2, 0xa3, 0x31, 0x73, 0xf0, 0x89, 0x2d, 0x9c, 0x63,
	0x64, 0xd3, 0x12, 0xcd, 0x9d, 0x47, 0xa2, 0xa9, 0xb2, 0xc8, 0x9f, 0xaf, 0x2c, 0x3e, 0x86, 0xa2,
	0x6f, 0x0f, 0xd0, 0xe7, 0xc6, 0x8a, 0x12, 0xda, 0x35, 0x29, 0xb4, 0x54, 0x58, 0xcd, 0x8e, 0xb2,
	0xb7, 0x43, 0xc1, 0x4e, 0x2d, 0x0d, 0xae, 0x7f, 0x05, 0xe5, 0xa9, 0xd7, 0xa4, 0x06, 0x2b, 0xaf,
	0xf0, 0x54, 0x45, 0xbd, 0x6e, 0xc9, 0xbf, 0xe4, 0x3d, 0x28, 0x0c, 0xe5, 0x5a, 0x3a, 0x9e, 0x8b,
	0xd2, 0xad, 0x72, 0x98, 0xc4, 0x61, 0x25, 0xd6, 0x87, 0xf9, 0x07, 0xb9, 0xc6, 0xef, 0xab, 0x50,
	0xb1, 0xd0, 0xa1, 0x43, 0x64, 0x26, 0x0d, 0x0f, 0xbd, 0x23, 0xf2, 0x08, 0xca, 0xdc, 0x47, 0x8c,
	0x9e, 0x7b, 0xa1, 0x4b, 0x4f, 0x74, 0x32, 0xae, 0xcc, 0x7d, 0xd2, 0xae, 0xee, 0x6e, 0xd6, 0x34,
	0x9a, 0x58, 0xf0, 0xbf, 0xc0, 0x7e, 0x6d, 0xa1, 0x60, 0xa7, 0xad, 0x43, 0x81, 0xec, 0x4b, 0xdb,
	0x3f, 0xdc, 0x8f, 0x70, 0x79, 0x73, 0x7a, 0xba, 0x17, 0x8a, 0xbb, 0xdb, 0x49, 0x66, 0x16, 0x53,
	0xc9, 0x37, 0x60, 0x30, 0xfc, 0x21, 0x46, 0x2e, 0x2c, 0x5b, 0x60, 0xda, 0x6d, 0x92, 0xb7, 0xb3,
	0xdd, 0x2e, 0x65, 0x93, 0x0e, 0x10, 0x1e, 0x3b, 0x0e, 0x72, 0x2e, 0x6d, 0x7d, 0x6a, 0xfa, 0x94,
	0x2f, 0xef, 0x6d, 0xd3, 0x3e, 0x17, 0xf0, 0xc8, 0x77, 0x70, 0x45, 0xaf, 0x64, 0xd2, 0x38, 0x14,
	0xe9, 0x40, 0x0b, 0x19, 0x9c, 0x2e, 0xa7, 0x93, 0xaf, 0x61, 0x93, 0xc6, 0xc2, 0xf7, 0x90, 0xed,
	0xa2, 0x40, 0x47, 0x3c, 0x3f, 0xc6, 0x50, 0x35, 0xc2, 0xea, 0xf6, 0xbb, 0x72, 0x77, 0x53, 0x5b,
	0xd8, 0xdc, 0x9f, 0x85, 0x5a, 0xf3, 0xec, 0xc6, 0x43, 0xd8, 0x9c, 0xc3, 0x91, 0x75, 0x28, 0x74,
	0xdb, 0xcf, 0xda, 0x56, 0xed, 0x02, 0xa9, 0x02, 0xec, 0x77, 0x5f, 0x58, 0x6d, 0x73, 0x5f, 0x3e,
	0xe7, 0x08, 0x40, 0xb1, 0xd5, 0x79, 0xde, 0xfa, 0xb6, 0x57, 0xcb, 0x37, 0xfe, 0x2c, 0x43, 0xc9,
	0x1c, 0x1c, 0x50, 0xdf, 0x73, 0x4e, 0xc9, 0x03, 0x58, 0x47, 0xc6, 0x28, 0x93, 0xb9, 0xd0, 0x72,
	0xa9, 0x27, 0x1d, 0x33, 0x01, 0x34, 0xdb, 0x4c, 0xd9, 0x92, 0xe0, 0xac, 0x09, 0x98, 0x7c, 0x02,
	0x25, 0xee, 0xd3, 0x13, 0x45, 0x4c, 0x04, 0x72, 0x35, 0x45, 0xec, 0x69, 0xa3, 0x66, 0x8e, 0xc1,
	0xe4, 0x33, 0xa8, 0xbc, 0x8c, 0xdd, 0x23, 0x1c, 0x89, 0x50, 0x1f, 0x63, 0x67, 0xa8, 0x34, 0x8d,
	0x97, 0x3b, 0x1f, 0xd8, 0xaf, 0xdb, 0x2f, 0xd1, 0x91, 0x8f, 0x07, 0xc8, 0x1c, 0xd9, 0xe4, 0x32,
	0xed, 0xfc, 0x3c, 0x8f, 0x98, 0x50, 0x76, 0x68, 0xc8, 0xd1, 0x89, 0x85, 0x37, 0x1c, 0x1d, 0x71,
	0xef, 0xa4, 0x3e, 0xc5, 0x9c, 0xd8, 0xdb, 0x4c, 0xef, 0x93, 0x35, 0xcd, 0xaa, 0xff, 0x5a, 0x80,
	0x4a, 0x2a, 0x53, 0x64, 0x1b, 0x8a, 0x18, 0xda, 0x03, 0x7f, 0x92, 0xd5, 0xd9, 0xc0, 0x76, 0x28,
	0xf5, 0xf5, 0x51, 0x91, 0x20, 0x49, 0x1f, 0xfe, 0xaf, 0x55, 0xf4, 0x8c, 0xfa, 0x71, 0x80, 0xfd,
	0x63, 0x86, 0xfc, 0x98, 0xfa, 0x6e, 0xa6, 0x0a, 0x5c, 0xc2, 0x25, 0x07, 0x70, 0x79, 0xbc, 0x6b,
	0x7d, 0x7a, 0xc0, 0x50, 0x76, 0x3f, 0x74, 0x97, 0x4e, 0x0f, 0xd3, 0x3e, 0x17, 0x32, 0xc9, 0xe7,
	0x70, 0x71, 0xea, 0xbd, 0x2a, 0x91, 0x2c, 0xd9, 0x9f, 0x25, 0x91, 0x5d, 0x28, 0xf1, 0x08, 0x1d,
	0xcf, 0xf6, 0xb9, 0x51, 0x50, 0xcd, 0x60, 0x6b, 0xb9, 0xf6, 0x9a, 0xbd, 0x04, 0x3a, 0xd6, 0x93,
	0x66, 0xd6, 0x7f, 0x93, 0xc7, 0xc1, 0xb4, 0x4d, 0xce, 0x47, 0xe2, 0x34, 0xca, 0x76, 0x16, 0x28,
	0x24, 0x79, 0x04, 0xa0, 0x82, 0x33, 0xa9, 0x8b, 0xdc, 0xc8, 0xab, 0x58, 0xae, 0xce, 0xf1, 0xf6,
	0x42, 0x71, 0xff, 0x9e, 0x3e, 0x69, 0x27, 0xf0, 0xff, 0x6e, 0x82, 0xeb, 0x3f, 0xe7, 0xa1, 0x9a,
	0xae, 0xc3, 0x37, 0xd2, 0xe5, 0x6d, 0x28, 0xc8, 0xee, 0x2e, 0xb4, 0x0c, 0xcf, 0xa8, 0xd4, 0x04,
	0x47, 0xba, 0x70, 0x69, 0x54, 0xee, 0xe7, 0x4d, 0xc8, 0x22, 0x22, 0xd9, 0x85, 0xea, 0xe4, 0x75,
	0xe6, 0x74, 0xcc, 0x70, 0xea, 0x3f, 0xe6, 0xe1, 0xf2, 0xa2, 0x52, 0x7e, 0xa3, 0x9c, 0x7c, 0x0f,
	0x57, 0x9d, 0x94, 0x2f, 0xca, 0xa6, 0x3f, 0x35, 0x4b, 0xc1, 0x9e, 0xe5, 0x40, 0xf6, 0x82, 0x79,
	0xb3, 0x3e, 0x36, 0x33, 0xf4, 0x82, 0xc5, 0xdc, 0xc6, 0x2f, 0x6b, 0x50, 0xdd, 0x45, 0x2e, 0xbc,
	0x50, 0xed, 0x57, 0x0f, 0xc5, 0xbf, 0x32, 0x3b, 0x3d, 0x86, 0x52, 0x80, 0xc2, 0x76, 0x6d, 0x61,
	0xeb, 0x29, 0xe0, 0x86, 0x2c, 0xfc, 0x74, 0x64, 0xcd, 0x27, 0x1a, 0x92, 0x0c, 0x50, 0x63, 0x86,
	0x3c, 0x79, 0x18, 0x72, 0x35, 0x69, 0x29, 0x1d, 0x54, 0x93, 0x93, 0x67, 0x86, 0x6d, 0x69, 0x88,
	0x35, 0x06, 0x93, 0x5b, 0xba, 0x2f, 0x14, 0x14, 0xe9, 0xad, 0x05, 0xa4, 0xfe, 0x69, 0x34, 0x6a,
	0x09, 0x4d, 0x28, 0x70, 0x87, 0x46, 0xa8, 0x4f, 0x6a, 0x63, 0x01, 0xba, 0x27, 0xed, 0x56, 0x02,
	0x23, 0x9f, 0xc2, 0x46, 0x80, 0x82, 0x79, 0x8e, 0x9e, 0xbd, 0xd6, 0xfe, 0xae, 0x56, 0x52, 0x70,
	0x59, 0xf2, 0xc9, 0xf3, 0x01, 0x43, 0x27, 0x99, 0x8a, 0x4b, 0x59, 0x4a, 0x7e, 0x86, 0x44, 0x5a,
	0x50, 0x8d, 0x23, 0xd7, 0x16, 0xb8, 0x17, 0x0a, 0x64, 0x43, 0xdb, 0xd7, 0x37, 0x9c, 0x33, 0x02,
	0x99, 0x21, 0x90, 0x5b, 0xb0, 0xc6, 0x92, 0x91, 0x44, 0x5f, 0x74, 0x36, 0xe7, 0xa6, 0x14, 0x6b,
	0x84, 0x20, 0x37, 0xa1, 0x18, 0xa9, 0x6e, 0xad, 0x2f, 0x37, 0x1b, 0xd3, 0x1d, 0xdc, 0xd2, 0x36,
	0xf2, 0x01, 0x14, 0x03, 0x14, 0xc7, 0xd4, 0xd5, 0xd7, 0x98, 0xb9, 0xa9, 0x56, 0x9b, 0x67, 0x1a,
	0x71, 0xe5, 0x5c, 0x8d, 0xb8, 0xde, 0x81, 0x4a, 0x4a, 0x33, 0xff, 0x6c, 0xba, 0xbe, 0x09, 0xa5,
	0x91, 0x86, 0xe4, 0xfc, 0xd4, 0x7b, 0xba, 0xd3, 0x6b, 0xf7, 0x6b, 0x17, 0xc8, 0x06, 0x94, 0xf6,
	0xba, 0xbd, 0x7e, 0xab, 0x6b, 0xb6, 0x6b, 0xb9, 0xc6, 0x35, 0x58, 0x95, 0xa2, 0x91, 0x88, 0x2f,
	0x3a, 0xfb, 0x3b, 0xad, 0x4e, 0xed, 0x82, 0x1c, 0xc4, 0x3a, 0xfb, 0x66, 0xab, 0xa3, 0xcc, 0x05,
	0xa5, 0x12, 0xb2, 0x06, 0x2b, 0xad, 0x8e, 0x34, 0x96, 0x61, 0xcd, 0x7c, 0x6a, 0x59, 0xed, 0x6e,
	0xbf, 0x96, 0x6b, 0x04, 0x50, 0x4c, 0xee, 0xa6, 0x32, 0xe9, 0xc9, 0x5a, 0xdc, 0xc8, 0xa9, 0xaf,
	0xde, 0x9c, 0xbb, 0x4f, 0x58, 0x23, 0x04, 0xb9, 0x0f, 0x1b, 0xee, 0x44, 0x8a, 0xa3, 0x03, 0x8b,
	0xcc, 0x4b, 0xd4, 0x4a, 0xe1, 0x06, 0x45, 0x95, 0xc1, 0xbb, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x06, 0xba, 0x96, 0x69, 0x33, 0x11, 0x00, 0x00,
}
